/*
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –≤ –≤–∏–¥–µ —ç–º–æ–¥–∑–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç –µ–µ –æ–±—Ä–∞—Ç–Ω–æ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:
–ú–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: —ç–º–æ–¥–∑–∏

–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ ‚úÖ
Sample Input:
ü•≤

Sample Output:
–ú–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ü•≤
*/

use std::io;

fn main() {
    let mut user_name1 = String::new();
    let mut user_name2 = String::new();
    let mut user_name3 = String::new();
    let mut user_name4 = String::new();
    let mut user_name5 = String::new();

    let result1 = io::stdin()
        .read_line(&mut user_name1)
        .expect("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å");
    let emodzi1 = user_name1.trim();

    let result1 = io::stdin()
        .read_line(&mut user_name1)
        .expect("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å");
    let emodzi2 = user_name2.trim();

    let result1 = io::stdin()
        .read_line(&mut user_name1)
        .expect("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å");
    let emodzi3 = user_name3.trim();

    let result1 = io::stdin()
        .read_line(&mut user_name1)
        .expect("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å");
    let emodzi4 = user_name4.trim();

    let result1 = io::stdin()
        .read_line(&mut user_name1)
        .expect("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å");
    let emodzi5 = user_name5.trim();

    println!("{}{}{}{}{}", emodzi1, emodzi2, emodzi3, emodzi4, emodzi5);
}
