use assert_cmd::Command; // библиотека для тестирования CLI

#[test]
fn test_multplie_inputs() {
    // Для всех выходов данных
    let test_cases = vec![
        (
            "10",
            "10 км = 6.214 миль\n10 км = 10936.100 ярдов\n10 км = 32808.400 футов\n10 км = 393701.000 дюймов\n",
        ),
        (
            "5",
            "5 км = 3.107 миль\n5 км = 5468.050 ярдов\n5 км = 16404.200 футов\n5 км = 196850.500 дюймов\n",
        ),
        (
            "100.5",
            "100.5 км = 62.451 миль\n100.5 км = 109907.805 ярдов\n100.5 км = 329724.420 футов\n100.5 км = 3956695.050 дюймов\n",
        ),
        (
            "0.876",
            "0.876 км = 0.544 миль\n0.876 км = 958.002 ярдов\n0.876 км = 2874.016 футов\n0.876 км = 34488.208 дюймов\n",
        ),
        (
            "0",
            "0 км = 0.000 миль\n0 км = 0.000 ярдов\n0 км = 0.000 футов\n0 км = 0.000 дюймов\n",
        ),
    ];
    for (input, expected) in test_cases {
        let mut cmd = Command::cargo_bin("RustProgramm").unwrap();
        cmd.write_stdin(input).assert().success().stdout(expected);
    }
    /*
    // Для одного входа и выхода данных
    // запускаем main.rs как бинарник
    let mut cmd = Command::cargo_bin("RustProgramm").unwrap();
    // подаем входные данные в stdin
    cmd.write_stdin("1")
        .assert()
        .success()
        .stdout("3\n-13\n-40\n"); // ожидаемый результат
    */
}
