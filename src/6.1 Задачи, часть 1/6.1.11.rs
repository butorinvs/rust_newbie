/*
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∏ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞:

    —á–∞—Å—Ç–æ—Ç—É –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ (–∫–ì—Ü) —Å –∫–æ—Ç–æ—Ä–æ–π –∫–æ–¥–∏—Ä—É–µ—Ç—Å—è –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫ –≤ —Ä–µ–∂–∏–º–µ —Å—Ç–µ—Ä–µ–æ (2 –∫–∞–Ω–∞–ª–∞);
    –ø—Ä–æ–ø—É—Å–∫–Ω—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å (–ö–±–∞–π—Ç/—Å–µ–∫);
    –æ–±—ä–µ–º —Å–∂–∞—Ç–∏—è –≤ %, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –æ–±—ä—ë–º –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.

–ò –≤—ã–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≥–ª—É–±–∏–Ω—É –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –≤–∏–¥–µ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞, –µ—Å–ª–∏ –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫ –∫–æ–¥–∏—Ä—É–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ —Å—Ç–µ—Ä–µ–æ (2 –∫–∞–Ω–∞–ª–∞) –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–∏–º–µ—Ä–µ.
–ü–æ–¥—Å–∫–∞–∑–∫–∞ üí°

–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ ‚úÖ


Sample Input:
48
45
84

Sample Output:
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: 24
*/

fn main() {
    let v = std::io::stdin()
        .lines()
        .take(3)
        .map(|x| x.unwrap().trim().parse::<f64>().unwrap())
        .collect::<Vec<_>>();
    let freq_hz = v[0] * 1000.0;
    let width_bytes = v[1] * 1024.0;
    let compression = 1.0 - (v[2] / 100.0);
    let depth = (width_bytes * 8.0 / (freq_hz * 2.0 * compression)).round();

    println!("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {}", depth as u32);
}
